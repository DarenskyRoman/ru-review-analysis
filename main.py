import streamlit as st
import torch
import re
from pymystem3 import Mystem
from transformers import AutoModelForSequenceClassification
from transformers import BertTokenizerFast
from nltk import word_tokenize
from nltk import download as nltk_load

@torch.no_grad()
def predict(text):
    inputs = tokenizer(text, max_length=512, padding=True, truncation=True, return_tensors='pt')
    outputs = model(**inputs)
    predicted = torch.nn.functional.softmax(outputs.logits, dim=1)
    predicted = torch.argmax(predicted, dim=1).numpy()
    return predicted

is_punkt_load = False

def punkt_load():
    global is_punkt_load

    if is_punkt_load:
        return

    nltk_load('punkt')

    is_punkt_load = True

def text_prepocessing(text):

    text = text.lower()

    text = re.sub(r'[^\u0400-\u04FF]', ' ', text)
    punkt_load()
    text_tokens = word_tokenize(text)

    text_tokens = [stem.lemmatize(token)[0] for token in text_tokens]
    text = ' '.join(text_tokens)

    return text
    

def do_analysis(text):

    if text == '' or text == None:
        return "–ñ–¥—ë–º –≤–≤–æ–¥ üïí"

    result = predict(text_prepocessing(text))
    
    if result == 1:
        result = "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ üôÇ"
    if result == 0:
        result = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ üòê"
    if result == 2:
        result = "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ ‚òπÔ∏è"

    return result


stem = Mystem()

tokenizer = BertTokenizerFast.from_pretrained('blanchefort/rubert-base-cased-sentiment-rurewiews')
model = AutoModelForSequenceClassification.from_pretrained('blanchefort/rubert-base-cased-sentiment-rurewiews', return_dict=True)

st.title("–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö")

st.write("""
        –í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏ —É–≤–∏–¥—å—Ç–µ –µ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
         
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """)

text = st.text_area(label="–Ø –ø–æ–ª–µ –Ω–∏–∂–µ", placeholder="–û—Ç–∑—ã–≤ —Å—é–¥–∞")

st.write(f"##### –†–µ–∑—É–ª—å—Ç–∞—Ç: {do_analysis(text)}")
